===============第2章:匹配单个字符============================
1.匹配普通文本(一般情况是只会返回首个匹配结果)
2.匹配任意字符
	1. 字符. 匹配任意一个字符
3.转义字符(转移元字符(有特殊含义的字符)):
	\特殊字符
	eg:\.

==============第3章:匹配一组字符==========================
1.匹配多个字符中的某一个
	[str] : 匹配str中任意一个字符

2.利用字符集区间(注意首的ASCII码小于尾部的ASCII码)(字符区间里面的元字符和普通文字没有区别)
	eg:[a-z]

3.排除区间
	eg:[^a-z]

==============第4章:使用元字符======================
1.匹配空白字符(vim中使用/可以搜索)
元字符
[\b]            回退一个字符
\f              换页符号
\n              换行符号
\r              回车符号
\t              制表符
\v              垂直制表符

2.匹配特定的字符类型
	1.数字与非数字
		\d 等价于[0-9]
		\D 等价于[^0-9]
	2.字母数字下划线与非字母数字下划线
		\w  [a-zA-Z0-9_]
		\W  [^a-zA-Z0-9_]
	3.匹配空白字符与非空白字符
		\s [\f\n\r\t\v]
		\S [^\f\n\r\t\v]

	4.匹配十六进制或八进制(极少使用)
		\x0A等价于\n
		\011等价于\t


3.使用POSIX字符集
!!!:注意在实际使用时需要再加一层[]表示定义一个字符集    eg:[[:alnum:]]
	[:alnum:]        [a-zA-Z0-9]
	[:alpha:]        [a-zA-Z]
	[:blank:]        [\t ](有空格)
	[:cntrl:]        0-31和127的ASCII码(控制字符)
	[:digit:]        [0-9]
	[:graph:]        与[:print:](任何一个可打印的字符)一样,但是去除空格
	[:lower:]        [a-z]
	[:punct:]        既不属于[:alnum:]也不属于[:cntrl:]的任意一个字符
	[:space:]        [\f\n\r\t\v ](有空格)
	[:upper:]        [A-Z]
	[:xdigit:]       [a-fA-F0-9]

====================第5章:重复匹配==============================
1.匹配一个或多个字符(+)
ch+(匹配ch至少一次,ch为单个字符)

2.匹配零个或多个字符(*)
ch*(匹配ch 零次或零次以上)

3.匹配零个或一个字符(?)
ch?(匹配ch 零次或一次)

4.具体的重复匹配
ch{n}  匹配ch n次
ch{n,} 匹配ch n次及其n次以上
ch{n1,n2} 匹配ch n1至n2次

5.防止过度匹配
注意+,*,{n,}都是属于贪婪型量词(尽可能多的匹配字符)
	在这些模式后面加?表示懒惰型量词(尽可能少的匹配字符)

=======================第6章:位置匹配==========================
