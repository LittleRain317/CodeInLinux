-------------------------计算机概论-----------------------------
芯片组通常分为两个桥接器来控制各组件的通信
（1）北桥负责连接速度较快的CPU，内存与显卡等组件；
（2）南桥负责连接速度较慢的周边接口，包括硬盘，USB,网卡等

库函数调用系统调用　
系统调用调用内核函数

一般来说操作系统会提供开发接口，让开发商制作他们的驱动程序
驱动程序与开发商有关，与操作系统的开发者无关

BIOS(Basic Input Output System)是一套程序，这套程序是写死在主板上面的一个内存芯片中，这个内存芯片在没有通电时也能够将数据记录，那就是只读存储器
操作系统（系统调用和内核）

IDE硬盘		/dev/hd[a-d]
SCSI/SATA/U盘	/dev/sd[a-p]
U盘		/dev/sd[a-p]
软盘		/dev/fd[0-1]
打印机		ｕ盘/dev/usb/lp[0-15]
		25针/dev/lp[0-2]
鼠标		Ｕ盘/dev/usb/mouse[0-15]
		ps2:/dev/psaux
当前的鼠标	/dev/mouse

磁盘的第一个扇区主要记录了两个重要的信息
1.主要启动记录区MBR：可以安装启动管理程序的地方，有446Bytes
2.分割表:记录整个磁盘分割的状态，有64bytes(四组记录,四个分区,每组记录了该区段的起始和结束的柱面号)


分区的一些限制:
1.主分区和扩展分区共计4个
2.扩展分区最多只有一个
3.逻辑分区是扩展分区继续划分出来的
4.扩展分区无法格式化

分区注意点,如果扩展分区被破坏，那么所有的逻辑分区都会被删除，因为逻辑分区的分区表记录在扩展分区里面

启动流程到操作系统之前的动作:
BIOS:启动主动运行的程序，会识别第一个可启动的装置
MBR:第一个可启动装置的第一个扇区内的主要启动记录区块，内含启动管理程序
启动管理程序(Boot loader):一个可读取核心文件来运行的软件
核心文件(操作系统内核):开始操作系统的功能

Boot loader的任务:
提供菜单:使用者可以选择不同的启动项目
加载核心文件:直接指向可启动的程序段开始操作系统
转交其他loader:将启动管理功能转交

每个分区都有自己的启动扇区(boot sector)
实际可启动的内核文件都是放在各个分区内

shutdown [-t 秒] [-arkhncfF] 时间[警告信息]
-t sec: -t后面加秒数，过sec秒后关机
-k    :	发送警告消息，不关机
-r    :	在将系统的服务停掉后就重新启动
-h    : 在将系统的服务停掉后就立即关机
-n    : 不经过init程序，直接以shutdown的功能来关机
-f    : 关机并启动之后，强制略过fsck的磁盘检查
-F    : 系统重新启动后，强制进行fsck的磁盘检查
-c    : 取消已经在进行的shutdown命令内容
时间  : 一定要加的参数！指定系统关机时间

run level 0:关机
run level 3:纯文本模式
run level 5:含有图形接口模式
run level 6:重新启动

man手册中的操作
空格		向下翻一页
[page down]	向上翻一页
[page up]	向下翻一页
[home]		回退第一页
[end]		去最后一页
/string		向下查找
?string		向上查找
n,N		移动查找结果的光标

man [-fk] [n]
-f	:显示工具和工具的简单说明等价于whatis	
n	:显示哪一页的man手册
-k	:搜索有关key的手册

\[enter]使命令连续到下一行

---------------------------linux基本命令------------------------------
date 
cal
bc
[Ctrl]+c	中断
[Ctrl]+d	终止输入


linux文件权限与目录配置----------------------------------|
/etc/passwd 记录系统上的账户和账户信息
/etc/shadow 记录个人密码
/etc/group  记录用户组

chgrp	[-R]	dirname/filename...
-R		:递归修改

chown	修改文件所属者
chown owner:group filename

chmod	修改文件权限
rwx:(三个bit对应三个状态有无)
chmod [-R] 文件或目录
-R		:递归修改

chmod | u | + | r | file/dir
      | g | - | w |
      |	o | = | x |
      |	a |   |   |

权限对于文件的重要性
r	可读
w	可编辑，新增修改（但不含删除）
x	可执行

权限对于目录的重要性
r	可以查询当前目录下的文件名数据
w	可以修改目录结构的权限（建立新文件或目录，删除已经存在的目录或文件，重命名，移动）
x	代表用户是否让该目录成为自己的工作目录,同时决定了能够使用该目录下的程序

文件种类:
1.正规文件:属性[-]
	纯文本文件ascii
	二进制文件binary
	数据格式文件data 通过特定程序来读取

2.目录:属性[d]
3.连接（类似于快捷方式):属性[l]
4.设备文件:
	块设备[b]:成组的设备比如硬盘
	字符设备[c]:串行端口的借口设备，特点一次性读取，不能截断
5.数据接口文件sockets:属性[s]
6.管道文件pipe:属性[p] 特点FIFO

重要的目录
/lost+found	这个目录是使用标准的ext2/ext3文件系统格式才会产生的一个目录，目的在于当文件系统发生错误时， 将一些遗失的片段放置到这个目录下。这个目录通常会在分区的最顶层存在， 例如你加装一颗硬盘于/disk中，那在这个系统下就会自动产生一个这样的目录『/disk/lost+found』
/proc	这个目录本身是一个『虚拟文件系统(virtual filesystem)』喔！他放置的数据都是在内存当中， 例如系统核心、进程信息(process)、周边装置的状态及网络状态等等。因为这个目录下的数据都是在内存当中， 所以本身不占任何硬盘空间啊！比较重要的文件例如：/proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/* 等等。
/sys	这个目录其实跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录与核心相关的信息。 包括目前已加载的核心模块与核心侦测到的硬件装置信息等等。这个目录同样不占硬盘容量喔！
/etc：配置文件
/bin：重要执行档
/dev：所需要的装置文件
/lib：执行档所需的函式库与核心所需的模块
/sbin：重要的系统执行

/bin主要放置在开机时，以及进入单人维护模式后还能够被使用的指令，至于/usr/bin则是大部分软件提供的指令放置处。

. 当前目录
.. 上级目录
- 前一个目录
~ 当前用户的home目录
~account account的home目录


pwd [-P]
--------|-p 显示出确实的路径，而非使用链接路径(默认会显示链接路径)

mkdir [-mp] 目录名称
--------|-m 配置文件的权限，直接配置，不需要看默认权限umask的脸色
--------|-p 递归创建

rmdir [-p] 空目录名称
--------|-p 递归删除

会根据PATH的设置，来决定率先使用哪一个命令
使用绝对路径或相对路径直接指定某个命令的档名来运行，会比搜寻PATH来的正确

ls [-aAdfFhilnrRSt] 目录名称
ls [--color={never,auto,always}] 目录名称
ls [--full-time] 目录名称
--------|-a 全部的文件，连同隐藏文件
--------|-d 仅列出目录本身，而不列出目录内的数据文件
--------|-l 长数据列出，包含文件的属性和权限等
--------|常用

--------|-A 全部的文件，但不包括. 和..
--------|-f 直接列出结果，而不进行排序（默认以文档名排序)
--------|-F 根据文件、目录等，赋予附加的数据结构（如/代表目录)
--------|-h 将文件容量以人类较易读的方式列出来
--------|-i 列出inode号码
--------|-n 列出UID和GID而非使用者和用户组的名字
--------|-r 将排序结果反向输出
--------|-R 递归列出
--------|-S 以文件大小排序，而不是以文件名排序
--------|-t 根据时间排序
--color=never:不要依据文件特征给出颜色显示
--color=always:显示颜色
--color=auto:让系统自行依据配置判断是否显示颜色
--full-tile:显示完整时间（年月日时分)
--time={atime,ctime}:输出访问access时间或改变权限属性时间(ctime)而非内容变更的时间(modification time)

cp [-adfilprsu] source destination
cp [options] source1 source2 source3... directory
--------|-a 相当于-pdr
--------|-d 若来源属于链接，则赋值链接而非文件本身
--------|-f 强制，若目标文件已经存在且无法开启，则移动后再尝试一次
--------|-i 若目标文件已经存在，则询问是否覆盖
--------|-l 进行硬链接的链接创建，而非复制文件本身
--------|-p 连同文件属性一起赋值，而非使用默认属性(备份常用)
--------|-r 递归复制
--------|-S 赋值为符号链接
--------|-u 若des比src旧才升级des

rm [-fir] 文件或目录
--------|-f 强制，忽略不存在的文件，没有警告信息
--------|-i 删除前询问
--------|-r 递归删除

\command 将会忽略掉alias的指定选项

mv [fiu] src des
mv [options] src1 src2 src3 ... des
--------|-f 强制，若目标文件存在，不会问询直接覆盖
--------|-i 若des存在，则询问是否覆盖
--------|-u 若des已经存在，且src较新，则升级update des

basename 获取文件名
dirname 获取目录名

cat [-AbEnTv]
--------|-A 相当于-vET,可列出一些特殊字符
--------|-b 列出行号，仅针对非空行号
--------|-E 将结尾的换行字节$显示出来
--------|-n 连同空行一起显示行号
--------|-T 将[tab]以^|显示出来
--------|-v 显示出特殊字符


nl [-bnw] 文件
--------|-b 指定行号方式，-b a：表示不论空行同样显示行号，-b t:有空行忽略显示行号（默认)
--------|-n 列出行号的方式，-n ln:行号最左边显示,rn最右边显示且不用0占位，rz用0占位，最右边显示
--------|-w 行号栏位的占用的位数如让行号占4位 -w 4

more内的操作
space:向下翻页
Enter:向下翻一行
/key:向下查找key
:f :显示文档名和当前行数
q 退出
b 回翻


less内的操作
space：向下翻一页
[pagedown]：等同于space
[pageup]：向上翻一页
/key
?key
n :重复前一个搜索
N :反向重复前一个搜索
q 退出


head [-n number] 文件
--------|-n 后面接数字，代表显示几行的意思
	    number为负数时，表示后面number行都不显示，只显示前面的


tail [-n number] 文件
--------|-n 后面接数字，代表显示几行
--------|-f 表示持续侦测后面所接的文件，要等到按下[ctrl]+c才会结束侦测(当数据更新时实时显示)
基本等同于head，只是方向相反


ob [-t Type] 文件
--------|-t a:利用默认字符输出
	    c:利用ascii字符输出
	    d[size] 利用十进制来输出数据，每个输出数据占用size 字节（以size字节来读取原始文本)
	    f[size]
	    o[size]
	    x[size]
最左边第一栏是以8进制显示的字节数

------------------------------------------------------------
modification time(mtime):默认
当前文件的内容变更时，会变更这个时间，内容指的是文件的内容而不是文件的属性或者权限
status time(ctime):
当该文件的状态改变时，比如权限或者属性被更改时，才会修改这个时间
access time(atime):
当文件的内容被读取时（文件被访问时），这个时间才会被修改
-------------------------------------------------------------



touch [-acdmt] 文件
--------|-a 仅修改访问时间
--------|-c 仅修改文件时间，若文件不存在则不创建文件
--------|-d 后面可以接想要修改的日期而不用目前的日期，也可以用--date="时间或日期"
--------|-m 仅修改modifytime（文件内容修改时间)
--------|-t 后面接想要修改的时间，格式为[YYMMDDhhmm]

默认权限umask -S（以可读形式展现)
umask(以数字，需要减掉的权限显示)
默认文件没有x权限，目录有x权限
eg:umask 
结果为0022 (022) user group other
		 0    2     2 //在777减去022
		 7    7     7
		 7    5     5 //实际权限
		 rwx  r-x   r-x


文件的隐藏属性
chattr(只能在Ext2/Ext3的文件系统上生效)
chattr [+-=] [ASacdistu] 文件或目录名
--------|+ 添加一个特殊参数
--------|- 移除一个特殊参数
--------|= 赋予权限
==========
--------|A 当配置了A属性时，若有存取此文件（或目录）时，它的存取时间atime将不会被修改，可避免I/O较慢的机器过度的存取磁盘。这对速度较慢的计算机有帮助
--------|S 一般文件是非同步写入磁盘的，如果加上S这个属性时，当你进行任何文件的修改，该改动会同步写入到磁盘中（sync)
--------|a 这个文件只能添加数据，不能删除也不能修改数据，只有root才能配置该权限
--------|c 将会自动将此文件压缩，在读取的时候自动解压缩，但是在存储的时候，将会先进行压缩然后再存储（对于大文件来说有用)
--------|d 当dump程序被运行的时候，配置d将可以使得该文件（目录）不会被dump备份
--------|i 让一个文件不能被删除、改名、配置连接也无法写入或新增数据!只有root可以配置，对系统安全性有强大的帮助
--------|s 如果这个文件被删除，它将会被完全的移除这个硬盘中，所以误删没有办法救回来
--------|u 与s相反，删除后，文件还留在硬盘中

lsattr(显示文件隐藏属性)
lsattr [-adR] 文件或目录
--------|-a 将隐藏文件的属性也显示
--------|-d 仅写出目录本身的属性
--------|-R 递归显示


Set UID
当s这个标志出现在文件拥有者x的权限上时，如/usr/bin/passwd 
[-rwsr-xr-x] 此时就称之为set UID，简称SUID的特殊权限
1.SUID权限仅对二进制程序有效
2.运行者对于该程序需要具有x的可执行程序
3.本权限仅在运行该程序的过程中有效（run-time)
4.运行者将具有该程序拥有者的权限

Set GID
s出现在文件用户组x的权限上
与SUID不同的是，SGID可以针对文件或目录配置
如果是文件:
1.SGID对二进制程序有效
2.程序运行者需要具有x权限
3.运行者在运行时会获得该程序用户组的权限支持
如果是目录:
1.使用者若对该目录具有r和x的权限时，使用者能够进入该目录
2.使用者在此目录下的有效用户组将会变成该目录的用户组
3.用途：若使用者在此目录下具有w权限（可以新建文件），则使用者所创建的新文件，该文件的用户组和此目录的用户组相同权限

Sticky Bit(sticky黏)
SBIT仅针对目录有效
1.当使用者对于该目录有wx权限
2.当使用者在该目录下创建文件或目录，仅有自己和root才有权限删除该文件
如/tmp [drwxrwxrwt]

4为SUDI
2为SGID
1为SBIT
ugb
例如:chmod 4755 test
当本身不具有x的权限时，赋予了UGB的话（实际上是具有空的权限)，其次s和t变成大写的ST

file(查看文件类型)


which(寻找可执行文件)
which [-a] command
--------|-a 显示所有PATH目录中可以找到的命令，而不只是第一个

whereis(寻找文件)(与find搜索磁盘不同，whereis是利用数据库搜索)
whereis [-bmsu] 文件或目录
--------|-b 只查找二进制文件
--------|-m 只找在说明文件manual路径下的文件
--------|-s 只找source来源文件
--------|-u 搜索不在上诉三个项目当中的其他特殊文件

whereis和locate是根据linux系统内记载了所有文件记录的一个数据库文件

locate [ir] keyword
--------|-i 忽略大小写
--------|-r 后面可以接正则表达式的显示方法

手动更新数据库updatedb

find [PATH] [option] [action] -a -o and连接两个选项 -o或
1.与时间有关的选项-atime -ctime -mtime
	如:
	-mtime n: 在n天之前的一天之内被更改过内容的文件
	-mtime +n: 列出在n天之前（不含n）被更改过内容的文件
	-mtime -n: 列出在n天之内（含n)被更改过内容的文件 
	-newer file: file为一个存在的文件，列出比file还要新的文件
2.与使用者或用户组有关的参数
	-uid n: n为数字，即UID，
	-gid n: n为数字，即GID
	-user name: name为使用者的账户名称
	-group name: 用户组名
	-nouser: 寻找文件的拥有者不存在/etc/passwd 的人
	-nogroup: 寻找文件的用户组不在/etc/group的文件
3.与文件权限及名称有关的参数
	-name filename: 寻找文件名叫filename的文件
	-size [+-] SIZE: 寻找比SIZE还要大(+)或小(-)的文件
			c byte k 1024 bytes 
			eg：[-size +50k] 比50KB还要大的文件
	-type TYPE:一般正规文件f, 设备文件b,c 目录d 链接l 管道s FIFO p等属性	
	-perm mode: 寻找文件刚好等于mode的文件，如-rwsr-xr-x 4755
	-perm -mode: 寻找文件必须要全部包含mode权限的文件(以mode为基准增加0或多个属性)
	-perm +mode: 寻找文件包含任意mode权限的文件(2005后不在支持用--perm /mode替换)
4.额外的动作
	-exec command : command为其他命令 -exec 后面可以接command来处理结果
	-print : 默认动作，打印到屏幕

eg:
[root@www ~]# find / -perm +7000 -exec ls -l {} \;
# 注意到，那个 -exec 后面的 ls -l 就是额外的命令，命令不支持命令别名，
# 所以仅能使用 ls -l 不可以使用 ll 喔！注意注意！
解读:
{} 代表的是『由 find 找到的内容』，如上图所示，find 的结果会被放置到 {} 位置中；
-exec 一直到 \; 是关键字，代表 find 额外动作的开始 (-exec) 到结束 (\;) ，在这中间的就是 find 命令内的额外动作。 在本例中就是『 ls -l {} 』罗！
因为『 ; 』在 bash 环境下是有特殊意义的，因此利用反斜线来跳脱。


权限和命令间的关系
一：让使用者能够进入某个目录成为工作目录的基本权限	
可使用的命令：cd
目录所需权限：x
额外要求：如ls，则需要有r权限
二：使用者在某个目录内读取一个文件的基本权限
可使用的命令:cat,more,less等等
目录所需权限：x
文件所需权限：r
三：让使用者可以修改一个文件的基本权限
可使用的命令：nano或vi或vim
目录所需权限：x
文件所需权限：rw
四：让使用者可以创建一个文件的基本权限
目录所需权限：wx
五：让使用者进入某个目录并且运行该目录下的基本权限
目录所需权限：x
文件所需权限：x

========================================文件系统===============================================================
superblock:记录此文件系统的整体信息，包括inode/block的总量，使用量，剩余量，以及文件系统的格式和相关信息
inode:记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码
block:实际记录文件的内容，若文件太大时，会占用多个block

磁盘碎片整理：因为文件写入的block太过于离散，此时文件读取的效能将会变得很差，这个时候通过碎片整理将同一个文件所属的blocks汇整在一起，加快读取速度

=======================================Ext2文件系统===========================================================
=======================================================================
data block(数据区块)
Ext2文件系统的限制如下
-----------------------------------------------------
|Block 大小	1KB	2KB	4KB		    |
|最大单一文件限制	16GB	256GB	2TB         |
|最大文件系统总容量	2TB	8TB	16TB	    |
-----------------------------------------------------
1.原则上，block的大小与数量在格式化完就不能够再改变了（除非重新格式化）
2.每个block内最多只能放置一个文件的数据
3.承上，如果文件大于block的大小，则一个文件会占用多个block数量
4.承上，如果文件小于block，则该block的剩余容量就不能再被使用了（磁盘空间会被浪费)
=======================================================================
=======================================================================
inode table(inode 表)
inode记录的文件数据至少包含:
1.该文件的存取模式rwx
2.该文件的拥有者和用户组owner/group
3.该文件的容量
4.该文件的创建或状态更改的时间ctime
5.最近一次的读取时间atime
6.最近一次的修改时间mtime
7.特殊文件的标志如setUID
8.文件真正内容的指向

每个inode大小为128bytes(ext2系统)
每个文件只会占用一个inode
文件系统所能创建的文件数量和inode的数量有关
系统读取文件的时候需要先找到inode,并分析inode所记录的权限与用户是否符合，若符合才开始读取block的内容
=======================================================================
=======================================================================
Superblock(超级区块)
1.block和inode的总量
2.未使用和已使用的inode/block数量
3.block和inode的大小(block为1,2,4k，inode为128bytes)
4.文件系统的挂载时间，最近一次写入数据的时间，最近一次检验磁盘（fsck）的时候等文件系统的相关信息
5.一个valib bit数值，若文件系统已被挂载则为0，否则为1

利用dumpe2fs命令查看superblock
可能每个block group都含有superblock，但是一个文件系统应该仅有一个superblock而已，因为，其他的block group若含有的话，主要是为了第一个block group内的superblock的备份
=======================================================================
=======================================================================
Filesystem Description(文件系统描述说明)
描述每个block group的开始和结束的block号码，以及说明每个区段(superblock, bitmap, inodemap, data block)分别介于哪一个block号码之间，同样利用dump2fs查看
=======================================================================
=======================================================================
block bitmap(区块对照表)
利用位图算法来判断哪一个block可以用
inode bitmap(inode对照表)
利用位图算法来判断哪一个inode可以用
=======================================================================
=======================================================================
dumpe2fs[-bh] 装置文件名
--------|-b 列出保留为坏轨的部分（一般用不到）
--------|-h 仅列出superblock的数据

=======================================================================





新增一个文件时，文件系统的行为：
现根据用户对于新增文件的目录是否有wx权限，若有才能新增
根据inode bitmap查找没有使用的inode号码，并且根据umask将新文件的权限/属性写入
根据block bitmap查找没有使用的block号码，将实际的数据写入，并且更新inode里block指向数据
将刚写入的block和inode写入inode bitmap和block bitmap，并更新superblock的内容
=======================================================================
在上古时期，没有日志，若发生数据不一致，需要检查中间数据（即superblock inodebitmap和blockbitmap）和实际数据的一致性，所以文件系统越大，时间越长
=======================================================================
日志式文件系统
1.预备：当系统要写入一个文件的时候，先在日志记录区块中记录某个文件准备要写入的信息
2.实际写入：开始写入文件的权限和数据,开始更新metadata的数据（509-513行的行为)
3.结束：完成数据和metadata更新后，在日志记录区块中完成该文件的记录

