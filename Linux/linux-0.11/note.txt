bochs //在计算机仿真系统bochs下的linux系统
docAndTools //文档和工具
images //内核镜像文件和根文件系统镜像文件
kernel //内核源码
=======================Linux内核体系结构====================
单内核模式可以粗略地分为三层:调用服务的主程序层(应用程序)
								|
								|
							执行系统调用的服务层(操作系统所提供的服务)
								|
								|
							支持系统调用的底层函数(操作系统内核)


(单内核)五个模块组成:进程调用模块，内存管理模块，文件系统模块，进程间通信模块，网络接口模块

----------------------Linux中断机制---------------------
中断信号通常分为两类:硬件中断和软件中断(异常)
									(异常分为故障和陷阱)
中断(0-255标识) 0-31 Intel公司固定使用或保留 32-255用户自定义(Linux则将32-47设置为由8259A中断控制芯片发出的硬件中断请求信号IRQ0-IRQ15,对于应用程序发出的系统调用system_call设置为128

Linux内核通过重新设置中断向量来让她们指向对应的实际处理过程(若没有重新设置，当发送了一个中断时会显示未知中断)

-------------------------Linux系统定时-------------------------
do_timer()函数来响应每次时钟中断信号(IRQ0)

Intel 8253被设置为每隔10ms就发出一个时钟中断IRQ0信号

------------------------Linux内核进程控制------------------
一个进程可以在内核态或用户态下执行，因此linux内核堆栈和用户堆栈是分开的
在单个CPU的情况下由于时间片被设置为很短(例如15个系统滴答=150ms)

------------------------任务数据结构-------------------------
task_struct(in sched.h)有时又被称之为进程控制块(PCB Process Control Block)或进程描述符(PD Processor Descriptor)

当一个进程在执行时，CPU所有寄存器的值、进程的状态、堆栈中的内容被称为该进程的上下文(task_struct)

用于保留进程切换时之前的进程状态信息

------------------------进程运行状态------------------------

