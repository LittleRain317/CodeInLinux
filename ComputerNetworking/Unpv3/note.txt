========================第1章:简介=========================
!!注意点:TCP是一个没有记录边界的字节流协议
因此在处理收发数据的边界时常常由应用层协议来决定（比如HTTPv1.0使用关闭连接 SMTP使用\r\n Sun远程过程调用（RPC)以及DNS在每个要发送的数据之前放置一个二进制的计数值来表示该记录的长度(TCP本身并不提供记录结束标志)

netstat命令
netstat [-atunlp]
--------|-a 目前系统上所有的连接、监听、socket都列出
--------|-t 列出tcp网络封包的数据
--------|-u 列出udp网络封包的数据
--------|-n 不以进程的服务名称，而以端口号显示
--------|-l 列出目前正在网络监听的程序
--------|-p 列出该网络服务的进程pid
--------|-i 提供网络接口信息
--------|-r 显示路由表

封包协议|接收队列|发送队列|本地ip和端口号|远程主机的ip和端口号|连接状态，创建（ESTABLISED）及监听（LISTEN）
Proto   | Recv-Q | Send-Q |Local Address |Foreign Address     |   State      
tcp        0      0 192.168.1.105:42776     211.159.235.143:http    TIME_WAIT  

socket file的输出栏有
Proto RefCnt(连接到此socket的数量) Flags       Type(确认连接STREAM与不需确认的DGRAM)       State(若CONNECTIED则表示多个进程之间已经连线创建)         I-Node   Path
unix  2      			   [ ]         DGRAM                  			  						             29510    /run/user/1000/systemd/notify

ifconfig 网络接口名字
显示每个网络接口的详细信息

=========================第2章:传输层TCP,UDP和SCTP(Stream Control Transmission Protocol)================
UDP是一个简单的、不可靠的数据报协议
TCP是一个复杂的、可靠的字节流协议
SCTP则比TCP提供更多的服务

-------------------------用户数据报协议UDP(User Datagram Protocol)----------------------

每个UDP数据报都有一个长度，如果一个数据报正确地到达目的地，则该数据报的长度将随着数据一道被传递给接收端应用进程（TCP则不相同)
UDP无连接:同一个UDP套接字可以发送一个数据给多个客户，也可以用一个UDP套接字从多个客户接受数据
面向连接与无连接是计算机网络诸多概念中的很重要的之一。所谓面向连接，是指通信双方在进行通信之前，要事先在双方之间建立起一个完整的可以彼此沟通的通道,这个通道也就是连接，在通信过程中，整个连接的情况一直可以被实时地监控和管理。而无连接的通信，就不需要预先建立起一个联络两个通信节点的连接来，需要通信的时候，发送节点就可以往“网络”上送出信息，让信息自主地在网络上去传，一般在传输的过程中不再加以监控，让该信息的传递在网上尽力而为地往目的地节点传送

-------------------------传输控制协议TCP(Transmission Control Protocol)-------------------
TCP连接:先与某个给定服务器进程建立一个连接，再跨该连接与该服务器进程交换数据，然后终止该连接
TCP可靠性:要求对方返回一个确认，如果没有收到确认，TCP就自动重传数据并等待更长时间，在多次重传失败后才放弃
TCP往返时间算法（RTT round-trip time)以便知道自己应该等待多长时间
TCP排序：给每一个字节关联一个序列号对发送的数据进行排序，如果数据乱序或重复则根据序列号进行筛选重新排列
TCP流量控制：告知对方在任何时刻它一次能够从对方接受多少字节的数据（通告窗口（advertised window）），该窗口动态变化
TCP双全工（full-duplex):在连接后任何时刻都是双向的可以收发数据

------------------------流控制传输协议(Stream Control Transmission Protocol)SCTP-----------------
SCTP类似TCP，但是在客户端和服务器之间提供关联（association）
与TCP的区别:
1.关联而不是连接：连接只涉及两个ip地址之间的通信，关联则是两个系统之间的一次通信，SCTP支持多宿而涉及不只两个地址
2.面向消息的（message-oriented):提供各个记录的按序传输，而且和UDP相同，每条记录长度随着记录一起发送
3.提供多个流：TCP会因为某个字节的数据丢失导致阻塞后面的数据直到该丢失被修复，SCTP提供多个流
4.多个宿主：使得单个SCTP端点支持多个IP地址(当某一个网络连接发生故障时有其他备选网络连接,多宿主主机就是一台具有多个网络接口的主机，因此可以通过多个IP地址来访问这台主机)
(通过路由协议的支持下TCP可以具有多宿特点：当两个路由器之间存在一条路由就可以保证两个路由器之间的BGP连接可用)

-----------------------TCP连接的建立和终止-----------------------------
三次握手
建立连接时会发生
1.服务器必须准备好接受外来的数据（一般用socket，bind，listen）称之为被动打开(accept阻塞)
2.客户端程序通过使用connect发起主动打开，将会导致客户端TCP发送一个SYN（同步）分节(segment)，用于告诉服务器将在连接中发送的数据的初始序列号（一般SYN分节(segment)其所在IP数据报只包含一个IP首部和TCP首部以及TCP选项)(connect阻塞)
3.服务器必须确认ACK(ACK为SYN的初始序列号+1)客户的SYN，同时自己也发送一个SYN，用于告诉客户端在发送数据的初始序列号，服务器在单个分节(segment)发送（SYN和客户SYN的ACK)(connect返回)
4.客户必须确认(ACK)服务器的SYN(accept返回，read或recv阻塞)

因为上述步骤至少需要3个分组，因此称之为TCP三次握手
TCP连接类似一个电话系统，socket等价于有电话可用，bind是告诉别人你的电话号码（套接字关联ip和端口号),listen则是打开电话响铃，connect需要知道对方的电话号码（ip和端口号),accept则发生在被呼叫的人应答电话时来电显示（但是不同的是accept实际上是建立连接之后才返回客户端的ip和端口号),DNS则提供了一本电话簿（用于ip和用户名对照)

TCP选项:
每一个SYN可以含有多个TCP选项
常见选项:
1.MSS选项:
	最大分节(segment)长度(Maximum Segment Size)
2.窗口规模选项:
	指定TCP首部中的通告窗口必须扩大的位数（0~14），因此所提供的最大窗口接近1GB(65535(2^16因为该字段占16位)*2^14),用于增大吞吐量
	但是必须双方系统都支持
3.时间戳选项:
	1）计算往返时延RTT：
	当a主机接收到b主机发送过来的确认ack报文s2时，a主机此时内核时刻为ta2.
	a主机从s2报文的timestamp echo选项中可以解析出该确认ack确认的报文的发送时刻为ta1.
	那么：RTT＝接收ack报文的时刻－发送报文的时刻＝ta2 －ta1.
	ta2和ta1都来自a主机的内核，所以不需要在tcp连接的两端进行任何时钟同步的操作。
	2）防止回绕的序号：
	我们知道TCP报文的序列号只有32位，而每增加2^32个序列号后就会重复使用原来用过的序列号。假设我们有一条高速网络，通信的主机双方有足够大的带宽涌来快速的传输数据。例如1Gb/s的速率发送报文，则不到35秒报文的序号就会重复。这样对TCP传输带来混乱的情况。而采用时间戳选项，可以很容易的分辨出相同序列号的数据报，哪个是最近发送，哪个是以前发送的。
	网络编程无需关心该细节

TCP连接终止:(四个分节(segment)但是可能FIN和数据一起在一个分节，也可能最后的ACK和FIN在同一个分节)
1.某个进程首先调用close（主动关闭)，于是该端的TCP发送FIN分节(segment)，表示数据结束
2.接受到该FIN分节的进程执行被动关闭(read返回0)（意味着该连接上没有数据可以接受了)，发送ACK确认(在2-3步骤之间的状态称之为半关闭,TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。这就是所谓的半关闭)
3.一段时间后（比如处理接受到FIN之前的数据），接收到该FIN的进程将调用close关闭它的套接字，导致该进程的TCP也会发送一个FIN
4.最初主动关闭的进程接受到了这个FIN后，发送ACK确认该FIN

TIME_WAIT状态:
存在的理由:
1.可靠地实现TCP双全工连接的终止（否则会发送RST被TCP视为错误)
2.允许老的重复分节(segment)在网络中消逝(TCP不给TIME_WAIT状态的连接发送新的连接)
该端点停留在这个状态的持续时间是最长分节生命期(Maximum Segment Lifetime,MSL,任何IP数据报能够在因特网中存活的最长时间)的两倍


---------------------------------SCTP关联的建立和终止-----------------
四次握手:
1.服务器必须准备好接受外来的关联，（socket，bind，listen）被动打开
2.客户端调用connect或者发送一个隐式打开该关联的消息进行主动打开，使得客户端SCTP发送INIT信息（内含客户端的IP地址清单，初始序列号，用于标识本次关联的所有分组的起始标记，客户请求的外出流的数目以及客户能够支持外来流的数目)
3.服务器以INIT ACK消息确认客户的INIT消息（除了上述内容还增加了状态cookie（包含服务器用于确信本关联有效所需的所有状态)
4.客户以COOKIE ECHO消息回射服务器的状态cookie（可能和其他数据一起在同一个分组里)
5.服务器以COOKIE ACK来确认客户端回射的cookie是正确的，之后该关联被建立

两端各自选择一个主目的地址，使用四次握手是为了避免dos攻击

关联终止:
不允许像TCP一样具有半关闭的关联，当一端关闭某个关联时，另一端必须停止发送新的数据

